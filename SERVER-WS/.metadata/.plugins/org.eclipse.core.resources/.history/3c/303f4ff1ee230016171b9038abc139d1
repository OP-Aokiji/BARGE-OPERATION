package com.gss.coms.bargeoperation.ws.endpoint;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import org.springframework.aop.framework.Advised;
import org.springframework.aop.support.AopUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.ReflectionUtils;
import org.springframework.web.context.WebApplicationContext;
import org.springframework.ws.server.endpoint.annotation.Endpoint;
import org.springframework.ws.server.endpoint.annotation.PayloadRoot;
import org.springframework.ws.server.endpoint.annotation.RequestPayload;
import org.springframework.ws.server.endpoint.annotation.ResponsePayload;

import com.gss.coms.bargeoperation.ws.schemas.Execute;
import com.gss.coms.bargeoperation.ws.schemas.ExecuteResponse;
import com.gss.coms.bargeoperation.ws.schemas.RequestInfo;
import com.gss.coms.bargeoperation.ws.schemas.ResponseInfo;

@Endpoint
public class FacadeServiceEndpoint {

	private static final String TARGET_NAMESPACE = "http://webservice.coms.gss.com/";
	
	@Autowired
	private WebApplicationContext webContext;
	
	@SuppressWarnings("unchecked")
	@PayloadRoot(localPart = "execute", namespace = TARGET_NAMESPACE)
	public @ResponsePayload ExecuteResponse execute(@RequestPayload Execute request) {
		ExecuteResponse response = new ExecuteResponse();
		ResponseInfo resInfo = new ResponseInfo();
		response.setResponseInfo(resInfo);
		
		RequestInfo reqInfo = request.getRequest();
		Object beanObj = webContext.getBean(reqInfo.getServiceID());
		
		Object targetObj = null;
		if (AopUtils.isAopProxy(beanObj)) {
			Advised advised = (Advised) beanObj;
			try {
				targetObj = advised.getTargetSource().getTarget();
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			targetObj = beanObj;
		}
		
		Object returnObj = null;
		Method[] listMethod = targetObj.getClass().getMethods();
		for (Method method : listMethod) {
			if (reqInfo.getMethodName().equals(method.getName())) {
				if (reqInfo.getParm().toArray() == null){
					returnObj = ReflectionUtils.invokeMethod(method, targetObj);
				}else{
					returnObj = ReflectionUtils.invokeMethod(method, targetObj, reqInfo.getParm().toArray());
				}
				break;
			}
		}
		
		ArrayList<Object> result = new ArrayList<Object>();
		if (returnObj instanceof List) {
			result = (ArrayList<Object>) returnObj;
		} else {
			result.add(returnObj);
		}
		resInfo.setResultObj(result);
		
		return response;
	}
}
