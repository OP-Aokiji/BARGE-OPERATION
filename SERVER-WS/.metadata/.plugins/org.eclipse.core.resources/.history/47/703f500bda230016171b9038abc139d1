package com.gss.coms.bargeoperation.controller.partner;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;

import javax.validation.Valid;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.MessageSource;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.validation.Validator;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.gss.coms.bargeoperation.controller.AbstractController;
import com.gss.coms.bargeoperation.model.PartnerInfo;
import com.gss.coms.bargeoperation.service.PartnerInfoService;

@Controller
@RequestMapping("/PartnerInfo")
public class PartnerInfoController extends AbstractController {
	private static final Logger logger = Logger.getLogger(PartnerInfoController.class);
	@Autowired
	MessageSource messageSource;
	@Autowired
	PartnerInfoService partnerInfoService;
	@Autowired
	@Qualifier("partnerValidator")
	private Validator validator;
	 SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss");
	@InitBinder
	private void initBinder(WebDataBinder binder) {
		binder.setValidator(validator);
	}

	@RequestMapping(value = { "", "/list" }, method = RequestMethod.GET)
	public ModelAndView list() {
		logger.info("list");
		return modelAndViewOfPartnerInfoList(RESULT_STATUS.NOTHING, "");
	}

	@RequestMapping(value = { "", "/edit/{id}" }, method = RequestMethod.GET)
	public ModelAndView edit(@PathVariable String id, Model model) {
		logger.info("list");
		return modelAndViewOfPartnerInfoById(RESULT_STATUS.NOTHING, id);
	}

	private ModelAndView modelAndViewOfPartnerInfoById(RESULT_STATUS resultStatus, String id) {
		ModelAndView mv = new ModelAndView("master/partner-info/update");

		PartnerInfo info = partnerInfoService.findById(id);

		mv.addObject("partnerInfo", info);
		return mv;
	}

	private ModelAndView modelAndViewOfPartnerInfoList(RESULT_STATUS resultStatus, String message) {
		ModelAndView mv = new ModelAndView("master/partner-info/list");
		List<PartnerInfo> partnerInfoList = partnerInfoService.getAll();


		mv.addObject("partnerList", partnerInfoList);
		mv.addObject("resultStatus", resultStatus);
		mv.addObject("message", message);
		return mv;
	}

	@RequestMapping(value = { "/create" }, method = RequestMethod.GET)
	public ModelAndView create(Model model) {
		model.addAttribute("partnerInfo", new PartnerInfo());
		return new ModelAndView("master/partner-info/create");
	}

	@RequestMapping(value = { "/update" }, method = RequestMethod.POST)
	public String submit(@ModelAttribute("partnerInfo") PartnerInfo partnerInfo, BindingResult result, ModelMap model) {
		if (result.hasErrors()) {
			return "error";
		}
		// qcCraneService.update(qcCrane, partnerInfo, model);
		try {
			if (result.hasErrors()) {
				logger.info("Returning master/partner-info/list.jsp page");
				return "master/partner-info/list";
			}
			partnerInfo.setCreatedDate(Calendar.getInstance().getTime());
			partnerInfoService.update(partnerInfo);
			logger.info("Save partner successfull. Return to partner info list");
			model.addAttribute("partnerInfo", partnerInfo);
			return "redirect:list";
		} catch (Exception e) {
			logger.error("Saving partner had exception. Params:" + partnerInfo + " Message:" + e);
			throw e;
		}
	}

	@RequestMapping(value = { "/save" }, method = RequestMethod.POST)
	public String save(@Valid PartnerInfo partnerInfo, BindingResult bindingResult, Model model) {
		logger.info("save");
		try {
			if (bindingResult.hasErrors()) {
				logger.info("Returning master/partner-info/create.jsp page");
				return "master/partner-info/create";
			}
			partnerInfo.setCreatedDate(Calendar.getInstance().getTime());
			partnerInfoService.save(partnerInfo);
			logger.info("Save partner successfull. Return to partner info list");
			model.addAttribute("partnerInfo", partnerInfo);
			return "redirect:list";
		} catch (Exception e) {
			logger.error("Saving partner had exception. Params:" + partnerInfo + " Message:" + e);
			throw e;
		}
	}

	@RequestMapping(value = { "/delete/{id}" }, method = RequestMethod.GET)
	public ModelAndView delete(@PathVariable String id, Model model) {
		logger.info("delete");
		try {
			partnerInfoService.deleteById(id);
			logger.info("delete partner successfull. Return to partner info list");
			return modelAndViewOfPartnerInfoList(RESULT_STATUS.SUCCESS,
					messageSource.getMessage("partnerinfo.delete.success", new Object[] {}, Locale.US));
		} catch (Exception e) {
			logger.error("Saving partner had exception. Params:" + id + " Message:" + e);
			throw e;
		}
	}

	@RequestMapping(value = { "/back" }, method = RequestMethod.POST)
	public String back() {
		logger.info("back");
		return "redirect:list";
	}
}
